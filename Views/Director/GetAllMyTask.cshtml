@using HRMS.Models;
@model List<Task>
@if (TempData["LogInAsUser"] != null)
{
    <script>
        $.notify("@TempData["LogInAsUser"]", "success");
        @{TempData["LogInAsUser"] = null;}
    </script>
}
@if (TempData["TaskAdded"] != null)
{
    <script>
        $.notify("@TempData["TaskAdded"]", "success");
        @{TempData["TaskAdded"] = null;}
    </script>
}
@if (TempData["TaskNotFound"] != null)
{
    <script>
        $.notify("@TempData["TaskNotFound"]", "error");
        @{TempData["TaskNotFound"] = null;}
    </script>
}
@if (TempData["TaskUpdated"] != null)
{
    <script>
        $.notify("@TempData["TaskUpdated"]", "success");
        @{TempData["TaskUpdated"] = null;}
    </script>
}

<head>
    <link rel="stylesheet" href="~/Content/assets/bootstrap/css/bootstrap.min.css">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/ionicons/2.0.1/css/ionicons.min.css">
    <link rel="stylesheet" href="~/Content/assets/dist/css/AdminLTE.min.css">
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="~/Content/assets/dist/css/skins/_all-skins.min.css">
</head>

<p>
    <h3> Your Tasks</h3>
</p>
<button class="btn btn-info mb-3" data-bs-toggle="modal" data-bs-target="#myModal" id="addTask">Add Task</button>

<table class="table table-hover" id="TasksDataTable">
    <thead>
        <tr>
            <th style="display:none">Task Id</th>
            <th>Task Date</th>
            <th>Task Name</th>
            <th>Task Description</th>
            <th>Approver</th>
            <th>Approved By</th>
            <th>Approved On</th>
            <th>Status</th>
            <th>Modified On</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Task i in Model)
        {
            <tr id="@i.TaskId">
                <td>@i.TaskId</td>
                <td>@i.TaskDate.Value.ToShortDateString()</td>
                <td>@i.TaskName</td>
                <td>@i.TaskDescription</td>
                <td>@i.Employee1.FirstName  @i.Employee1.LastName</td>
                @if (i.Employee != null)
                {
                    <td>@i.Employee.FirstName @i.Employee.LastName</td>
                }
                else
                {
                    <td></td>
                }
                @if (i.ApprovedORRejectedOn != null)
                {
                    <td>@i.ApprovedORRejectedOn.Value.ToShortDateString()</td>
                }
                else
                {
                    <td></td>
                }

                <td>@i.Status</td>
            @if (i.ModifiedOn != null)
            {
                <td>@i.ModifiedOn.Value.ToShortDateString()</td>
            }
            else
            {
                <td></td>
            }

            <td>
                @Html.ActionLink("Edit", "EditTask", "Director",
                   new { id = @i.TaskId }, new { @class = "btn btn-primary" })
       
                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal" onclick="openModal(@i.TaskId)">
                    Delete
                </button>
                @*@Html.ActionLink("Delete", "DeleteTask", "Director",
                new { id = @i.TaskId }, new { @class = "btn btn-danger" })*@
            </td>

        </tr>

    }
    </tbody>


    
</table>

<div class="modal" id="myModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content" >


            <div class="modal-body" id="modal-body" style="min-height:200px;width:500px">
                <p class="h3 p-3">Are You Sure ?</p>
                <p>
                    <button class="btn btn-success" id="yesDelete">Yes</button>
                    <button class="btn btn-info" data-bs-dismiss="modal" id="noDelete">No</button>
                </p>

            </div>
            <div class="modal-footer">
                <button data-bs-dismiss="modal" class="btn btn-danger" id="modalClose">Cancel</button>
            </div>

        </div>
    </div>
</div>

<script src="~/Content/assets/plugins/slimScroll/jquery.slimscroll.min.js"></script>
<!-- FastClick -->
<script src="~/Content/assets/plugins/fastclick/fastclick.js"></script>
<!-- AdminLTE App -->
<script src="~/Content/assets/dist/js/app.min.js"></script>
<!-- AdminLTE for demo purposes -->
<script src="~/Content/assets/dist/js/demo.js"></script>
<script>
    $("#addTask").click(function () {
        $.ajax({
            method: "GET",
            url: "/Partial/AddTaskForm",
            success: function (data) {
                $("#modal-body").html(data);
                $.validator.unobtrusive.parse($("#AddTasKForm"));
                $("#myModal").modal("show");
                console.log(data);
            },
            error: function (data) {
                $.notify("something went wrong", "error");
            }
        })
    })

    $(document).on("submit", "#AddTaskForm", function (e) {
        e.preventDefault();
        let data = new FormData($(this)[0]);


        if ($(this).valid()) {
            $.ajax({
                method: "POST",
                url: "/AJAX/AddTask",
                data: data,
                processData: false,
                contentType: false,
                success: function (data) {
                    const dataToPrint = JSON.parse(data.data);


                    if (data.status == "Success") {

                        var row = $("#TasksDataTable").DataTable().row.add(
                            {
                                TaskId: dataToPrint.TaskId,
                                TaskDate: getFormattedDate(dataToPrint.TaskDate),
                                TaskName: dataToPrint.TaskName,
                                TaskDescription: dataToPrint.TaskDescription,
                                Approver: dataToPrint.ApproverFirstName + " " + dataToPrint.ApproverLastName,
                                ApprovedBy: (dataToPrint.ApprovedByFirstName == null ? '' : dataToPrint.ApprovedByFirstName) + " " + (dataToPrint.ApprovedByLastName == null ? '' : dataToPrint.ApprovedByLastName),
                                Status: dataToPrint.Status,
                                ModifiedOn: getFormattedDate(dataToPrint.ModifiedOn),
                                ApprovedOn: dataToPrint.ApprovedDate,
                                Actions: null
                            }
                        ).draw();
                        /*  $(row.node()).attr("data-id", dataToPrint.TaskId);*/
                        $.notify(data.message, "success");
                    }
                    else {
                        $.notify(data.message, "error");
                    }
                    console.log(data);
                    $("#modalClose").click();
                },
                error: function (data) {
                    console.log(data);
                    $("#modalClose").click();
                }
            })
        } else {
            $.notify("Form Validation Failed", "error");
        }
    });


    function loadDataToModal(id) {
        console.log(id);
        $.ajax({
            method: "GET",
            url: "/Partial/EditTaskForm/" + id,
            success: function (data) {
                $("#modal-body").html(data);
                $.validator.unobtrusive.parse($("#EditTaskForm"));
                $("#myModal").modal("show");
                console.log(data);
            },
            error: function (data) {
                $.notify("comething went wrong", "error");
            }
        })
    }

    $(document).on("submit", "#EditTaskForm", function (e) {
        e.preventDefault();
        var data = new FormData($(this)[0]);
        if ($(this).valid()) {
            $.ajax({
                method: "POST",
                url: "/AJAX/EditTask/",
                data: data,
                processData: false,
                contentType: false,
                success: function (data) {
                    const dataToPrint = JSON.parse(data.data);


                    if (data.status == "Success") {

                        var row = $("#TasksDataTable").DataTable().row("#" + dataToPrint.TaskId).data(
                            {
                                TaskId: dataToPrint.TaskId,
                                TaskDate: getFormattedDate(dataToPrint.TaskDate),
                                TaskName: dataToPrint.TaskName,
                                TaskDescription: dataToPrint.TaskDescription,
                                Approver: dataToPrint.ApproverFirstName + " " + dataToPrint.ApproverLastName,
                                ApprovedBy: (dataToPrint.ApprovedByFirstName == null ? '' : dataToPrint.ApprovedByFirstName) + " " + (dataToPrint.ApprovedByLastName == null ? '' : dataToPrint.ApprovedByLastName),
                                Status: dataToPrint.Status,
                                ModifiedOn: getFormattedDate(dataToPrint.ModifiedOn),
                                ApprovedOn: dataToPrint.ApprovedDate,
                                Actions: null
                            }
                        ).draw();

                        let buttons = `<button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#myModal"  onclick="loadDataToModal(${dataToPrint.TaskId})">
    Edit
</button>
<button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal" onclick="openModal(${dataToPrint.TaskId})">
    Delete
</button>`;

                        var labelColorClass = "";
                        //// Append the buttons to the last column in the row
                        if (data.Status == "Approved") {
                            labelColorClass = "label-success";
                        }
                        else if (data.Status == "Rejected") {
                            labelColorClass = "label-danger";
                        }
                        else {
                            labelColorClass = "label-warning";
                        }
                        const spanToAppend = `<span class='label ${labelColorClass}'>${dataToPrint.Status}</span>`

                        //console.log(spanToAppend);
                        //console.log($(row).find("td:eq(6)"));

                        $("#" + dataToPrint.TaskId).find("td:eq(6)").html(spanToAppend);

                        $("#" + dataToPrint.TaskId).find('td:last').html(buttons);
                        /*  $(row.node()).attr("data-id", dataToPrint.TaskId);*/
                        $.notify(data.message, "success");
                    }
                    else {
                        $.notify(data.message, "error");
                    }
                    console.log(data);
                    $("#modalClose").click();
                },
                error: function (err) {
                    console.log(err);
                }
            })
        }

    })
 
    function openModal(id) {
        $("#modal-body").html(`  <p class="h3 p-3">Are You Sure ?</p>
<p>
    <button class="btn btn-success" id="yesDelete">Yes</button>
    <button class="btn btn-info" data-bs-dismiss="modal" id="noDelete">No</button>
</p>`);

        $("#yesDelete").attr("onclick", `deleteProduct(${id})`)
    }
    function deleteProduct(id) {
        console.log($(this))
        $.ajax({
            method: "GET",
            url: "/Director/DeleteTask/" + id,
            success: function (data) {
                //console.log($(this))
                //console.log(data);
                if (data.Status = "success") {
                    $("#TasksDataTable").DataTable().rows("#" + id).remove().draw();
                    $(`#${id}`).remove();
                    $("#noDelete").click();
                    $.notify("Task Deleted", "success");
                }
            },
            error: function (data) {
                $.notify("Something Went Wrong", "error");
                console.log("Error Occured");
            }
        })
    }
    </script>
@*<script>
    $("#addTask").click(function () {
        $.ajax({
            method: "GET",
            url: "/Partial/AddTaskForm",
            success: function (data) {
                $("#modal-body").html(data);
                $.validator.unobtrusive.parse($("#AddTasKForm"));
                $("#myModal").modal("show");
                console.log(data);
            },
            error: function (data) {
                $.notify("something went wrong", "error");
            }
        })
    })
    function getFormattedDate(data) {
        console.log(data);
        if (data == null) {
            return "";
        }
        if (/^\/Date\(\d+\)\/$/.test(data)) {
            var ob = data;
            var timestamp = parseInt(ob.replace("/Date(", "").replace(")/", ""));
            var purchaseDate = new Date(timestamp);
            var year = purchaseDate.getFullYear();
            var month = ('0' + (purchaseDate.getMonth() + 1)).slice(-2);
            var day = ('0' + purchaseDate.getDate()).slice(-2);
            var formattedDate = day + '/' + month + '/' + year;
            return formattedDate
        }
        var inputDate = data;
        var date = new Date(inputDate);
        var day = date.getDate();
        var month = date.getMonth() + 1; // January is 0, so we add 1
        var year = date.getFullYear();
        var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year;
        return formattedDate;
    }
    $(document).on("submit", "#AddTaskForm", function (e) {
        e.preventDefault();
        let data = new FormData($(this)[0]);


        if ($(this).valid()) {
            $.ajax({
                method: "POST",
                url: "/AJAX/AddTask",
                data: data,
                processData: false,
                contentType: false,
                success: function (data) {
                    const dataToPrint = JSON.parse(data.data);


                    if (data.status == "Success") {

                        var row = $("#TasksDataTable").DataTable().row.add(
                            {
                                TaskId: dataToPrint.TaskId,
                                TaskDate: getFormattedDate(dataToPrint.TaskDate),
                                TaskName: dataToPrint.TaskName,
                                Description: dataToPrint.TaskDescription,
                                Approver: dataToPrint.ApproverFirstName + " " + dataToPrint.ApproverLastName,
                                ApprovedBy: (dataToPrint.ApprovedByFirstName == null ? '' : dataToPrint.ApprovedByFirstName) + " " + (dataToPrint.ApprovedByLastName == null ? '' : dataToPrint.ApprovedByLastName),
                                Status: dataToPrint.Status,
                                ModifiedOn: getFormattedDate(dataToPrint.ModifiedOn),
                                ApprovedOn: dataToPrint.ApprovedDate,
                                Actions: null
                            }
                        ).draw();
                      /*  $(row.node()).attr("data-id", dataToPrint.TaskId);*/
                        $.notify(data.message, "success");
                    }
                    else {
                        $.notify(data.message, "error");
                    }
                    console.log(data);
                    $("#modalClose").click();
                },
                error: function (data) {
                    console.log(data);
                    $("#modalClose").click();
                }
            })
        } else {
            $.notify("Form Validation Failed", "error");
        }
    });
</script>

<script>
    $(document).ready(function () {

        var dataTable = $("#TasksDataTable").DataTable({
            lengthMenu: [
                [5, 10, 15, 20, -1],
                [5, 10, 15, 20, 'All']
            ],
            columns: [
                {
                    data: "TaskId",
                    visible: false,
                   },
                {
                    data: "TaskDate",
                },
                { data: "TaskName" },
                { data: "Description" },
                { data: "Approver" },
                { data: "ApprovedBy" },
                { data: "ApprovedOn" },
                { data: "Status" },
                { data: 'ModifiedOn' },
                {
                    data: 'Actions',
                    render: function(data, type, row){
                        render: function (data, type, row) { return `<a href="" id=${row.task_id} class="EditTask">Edit</a> | <a href="" class="DeleteTaskByUser" id=${row.task_id} class="DeleteTask">Delete</a>`; }
                    },

            ],

            createdRow: function (row, data, dataIndex) {

                const id = data.TaskId;

                let buttons = `<button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#myModal"  onclick="loadDataToModal(${id})">
                        Edit
                    </button>
                    <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal" onclick="openModal(${id})">
                        Delete
                    </button>`;
                console.log(data);
                var labelColorClass = "";
                //// Append the buttons to the last column in the row
                if (data.Status == "Approved") {
                    labelColorClass = "label-success";
                }
                else if (data.Status == "Rejected") {
                    labelColorClass = "label-danger";
                }
                else {
                    labelColorClass = "label-warning";
                }
                const spanToAppend = `<span class='label ${labelColorClass}'>${data.Status}</span>`
                $(row).attr("id", id);
                //console.log(spanToAppend);
                //console.log($(row).find("td:eq(6)"));

                $(row).find("td:eq(6)").html(spanToAppend);

                $(row).find('td:last').html(buttons);

            }
        });


        dataTable.on('length.dt', function (e, settings, len) {
            var from = $("#TasksDataTable").DataTable().rows().count();
            console.log("from" + from);
            if (len == -1 || (len > from)) {
                $.ajax({
                    method: "GET",
                    url: "/AJAX/FetchFromTo?from=" + from + "&to=" + len,
                    success: function (data) {
                        const dataToPrint = JSON.parse(data.data);
                        console.log(dataToPrint);

                        if (data.status == "Success") {
                            dataToPrint.forEach(item => {
                                var row = $("#TasksDataTable").DataTable().row.add(
                                    {
                                        TaskId: item.TaskId,
                                        TaskDate: getFormattedDate(item.TaskDate),
                                        TaskName: item.TaskName,
                                        Description: item.TaskDescription,
                                        Approver: item.ApproverFirstName + " " + item.ApproverLastName,
                                        ApprovedBy: (item.ApprovedByFirstName == null ? '' : item.ApprovedByFirstName) + " " + (item.ApprovedByLastName == null ? '' : item.ApprovedByLastName),
                                        Status: item.Status,
                                        ModifiedOn: getFormattedDate(item.ModifiedOn),
                                        ApprovedOn: getFormattedDate(item.ApprovedDate),
                                        Actions: null
                                    }
                                ).draw();
                                /*  $(row.node()).attr("data-id", dataToPrint.TaskId);*/

                            })
                            $.notify(data.message, "success");
                        }
                        else {
                            $.notify("Something Went Wrong", "error");
                        }
                        console.log(data);

                    },
                    error: function (err) {
                        console.log(err);
                    }
                })
            }


            console.log(len);
        })

    })
</script>
<script>
    console.log("Hello world");
    function openModal(id) {
        $("#modal-body").html(`  <p class="h3 p-3">Are You Sure ?</p>
  <p>
      <button class="btn btn-success" id="yesDelete">Yes</button>
      <button class="btn btn-info" data-bs-dismiss="modal" id="noDelete">No</button>
  </p>`);

        $("#yesDelete").attr("onclick", `deleteProduct(${id})`)
    }
    function deleteProduct(id) {
        console.log($(this))
        $.ajax({
            method: "GET",
            url: "/Director/DeleteTask/" + id,
            success: function (data) {
                //console.log($(this))
                //console.log(data);
                if (data.Status = "success") {
                    $("#TasksDataTable").DataTable().rows("#"+id).remove().draw();
                    $(`#${id}`).remove();
                    $("#noDelete").click();
                    $.notify("Task Deleted", "success");
                }
            },
            error: function (data) {
                $.notify("Something Went Wrong", "error");
                console.log("Error Occured");
            }
        })
    }

    function loadDataToModal(id) {
        console.log(id);
            $.ajax({
                method: "GET",
                url: "/Partial/EditTaskForm/"+id,
                success: function (data) {
                    $("#modal-body").html(data);
                    $.validator.unobtrusive.parse($("#EditTaskForm"));
                    $("#myModal").modal("show");
                    console.log(data);
                },
                error: function (data) {
                    $.notify("comething went wrong", "error");
                }
            })
    }

    $(document).on("submit", "#EditTaskForm", function (e) {
        e.preventDefault();
        var data = new FormData($(this)[0]);
        if ($(this).valid()) {
            $.ajax({
                method: "POST",
                url: "/AJAX/EditTask/",
                data: data,
                processData: false,
                contentType: false,
                success: function (data) {
                    const dataToPrint = JSON.parse(data.data);


                    if (data.status == "Success") {

                        var row = $("#TasksDataTable").DataTable().row("#" + dataToPrint.TaskId).data(
                            {
                                TaskId: dataToPrint.TaskId,
                                TaskDate: getFormattedDate(dataToPrint.TaskDate),
                                TaskName: dataToPrint.TaskName,
                                Description: dataToPrint.TaskDescription,
                                Approver: dataToPrint.ApproverFirstName + " " + dataToPrint.ApproverLastName,
                                ApprovedBy: (dataToPrint.ApprovedByFirstName == null ? '' : dataToPrint.ApprovedByFirstName) + " " + (dataToPrint.ApprovedByLastName == null ? '' : dataToPrint.ApprovedByLastName),
                                Status: dataToPrint.Status,
                                ModifiedOn: getFormattedDate(dataToPrint.ModifiedOn),
                                ApprovedOn: dataToPrint.ApprovedDate,
                                Actions: null
                            }
                        ).draw();

                        let buttons = `<button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#myModal"  onclick="loadDataToModal(${dataToPrint.TaskId})">
    Edit
</button>
<button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal" onclick="openModal(${dataToPrint.TaskId})">
    Delete
</button>`;

                        var labelColorClass = "";
                        //// Append the buttons to the last column in the row
                        if (data.Status == "Approved") {
                            labelColorClass = "label-success";
                        }
                        else if (data.Status == "Rejected") {
                            labelColorClass = "label-danger";
                        }
                        else {
                            labelColorClass = "label-warning";
                        }
                        const spanToAppend = `<span class='label ${labelColorClass}'>${dataToPrint.Status}</span>`

                        //console.log(spanToAppend);
                        //console.log($(row).find("td:eq(6)"));

                        $("#" + dataToPrint.TaskId).find("td:eq(6)").html(spanToAppend);

                        $("#" + dataToPrint.TaskId).find('td:last').html(buttons);
                        /*  $(row.node()).attr("data-id", dataToPrint.TaskId);*/
                        $.notify(data.message, "success");
                    }
                    else {
                        $.notify(data.message, "error");
                    }
                    console.log(data);
                    $("#modalClose").click();
                },
                error: function (err) {
                    console.log(err);
                }
            })
        }

    })
</script>*@
<script>
    $(document).ready(function () {
        $("#TasksDataTable").DataTable({
            serverSide: true,
            ajax: {
                url: "/AJAX/HandleDataTable",
                type: "POST",

            },
            columns: [
                {
                    data: "TaskId",
                    name: "TaskId",
                    visible: false,
                    searchable: false,
                    orderable: false
                },
                {
                    data: "TaskDate",
                    name: "TaskDate",
                    render: function (data,type,row) {
                        return getFormattedDate(data);
                    }
                },
                { data: "TaskName", name: "TaskName", },
                {
                    data: "TaskDescription", name: "TaskDescription",
                    searchable: false,
                    orderable: false
                },
                {
                    data: "Approver", name: "Approver" },
                {
                    data: "ApprovedBy", name: "ApprovedBy", searchable: false,
                    orderable: false },
                {
                    data: "ApprovedOn",
                    name: "ApprovedOn",
                 
                    render: function (data, type, row) {
                        return getFormattedDate(data);
                    }
                },
                { data: "Status", name: "Status" },
                {
                    data: 'ModifiedOn',
                    name: 'ModifiedOn',
                    render: function (data, type, row) {
                        return getFormattedDate(data);
                    }
                },
                {
                    data: 'Actions',
                    searchable: false,
                    orderable: false,
                    render: function (data, type, row) {
                        return `<a href="" id=${row.task_id} class="EditTask">Edit</a> | <a href="" class="DeleteTaskByUser" id=${row.task_id} class="DeleteTask">Delete</a>`;
                    },
                }],



            createdRow: function (row, data, dataIndex) {

                const id = data.TaskId;

                let buttons = `<button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#myModal"  onclick="loadDataToModal(${id})">
            Edit
        </button>
        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#myModal" onclick="openModal(${id})">
            Delete
        </button>`;
                console.log(data);
                var labelColorClass = "";
                //// Append the buttons to the last column in the row
                if (data.Status == "Approved") {
                    labelColorClass = "label-success";
                }
                else if (data.Status == "Rejected") {
                    labelColorClass = "label-danger";
                }
                else {
                    labelColorClass = "label-warning";
                }
                const spanToAppend = `<span class='label ${labelColorClass}'>${data.Status}</span>`
                $(row).attr("id", id);
                //console.log(spanToAppend);
                //console.log($(row).find("td:eq(6)"));

                $(row).find("td:eq(6)").html(spanToAppend);

                $(row).find('td:last').html(buttons);

            }
        })

    })
    function getFormattedDate(data) {
        console.log(data);
        if (data == null) {
            return "";
        }
        if (/^\/Date\(\d+\)\/$/.test(data)) {
            var ob = data;
            var timestamp = parseInt(ob.replace("/Date(", "").replace(")/", ""));
            var purchaseDate = new Date(timestamp);
            var year = purchaseDate.getFullYear();
            var month = ('0' + (purchaseDate.getMonth() + 1)).slice(-2);
            var day = ('0' + purchaseDate.getDate()).slice(-2);
            var formattedDate = day + '/' + month + '/' + year;
            return formattedDate
        }
        var inputDate = data;
        var date = new Date(inputDate);
        var day = date.getDate();
        var month = date.getMonth() + 1; // January is 0, so we add 1
        var year = date.getFullYear();
        var formattedDate = (day < 10 ? '0' : '') + day + '/' + (month < 10 ? '0' : '') + month + '/' + year;
        return formattedDate;
    }
</script>